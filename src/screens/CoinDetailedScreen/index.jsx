import React, { useState, useEffect } from "react";import {    View,    Text,    Dimensions,    TextInput,    ActivityIndicator,} from "react-native";import CoinDetailedHeader from "./components/CoinDetailedHeader";import styles from "./styles";import { AntDesign } from "@expo/vector-icons";import {    ChartDot,    ChartPath,    ChartPathProvider,    ChartYLabel,} from "@rainbow-me/animated-charts";import { useRoute } from "@react-navigation/native";import { getDetailedCoinData, getCoinMarketChart} from "../../service/requests";import FilterComponent from "./components/FilterComponent";const filterDaysArray = [    { filterDay: "1", filterText: "24h" },    { filterDay: "7", filterText: "7d" },    { filterDay: "30", filterText: "30d" },    { filterDay: "365", filterText: "1y" },    { filterDay: "max", filterText: "All" },];const CoinDetailedScreen = () => {    const [coin, setCoin] = useState(null);    const [coinMarketData, setCoinMarketData] = useState(null);    const route = useRoute();    const {        params: { coinId, curSymbol },    } = route;    const [loading, setLoading] = useState(false);    const [coinValue, setCoinValue] = useState("1");    const [usdValue, setUsdValue] = useState("");    const [selectedRange, setSelectedRange] = useState("1");    const fetchCoinData = async () => {        try {            setLoading(true);            const fetchedCoinData = await getDetailedCoinData(coinId);            setCoin(fetchedCoinData);            setUsdValue(curSymbol === "usd" ? fetchedCoinData.market_data.current_price.usd.toString() : curSymbol === "eur" ? fetchedCoinData.market_data.current_price.eur.toString() : fetchedCoinData.market_data.current_price.cny.toString());            setLoading(false);        }catch (e) {            console.log(e)        }    };    const fetchMarketCoinData = async (selectedRangeValue,currency) => {        try {            const fetchedCoinMarketData = await getCoinMarketChart(                coinId,                selectedRangeValue,                currency            );            setCoinMarketData(fetchedCoinMarketData);        }catch (e) {            console.log(e)        }    };    useEffect(() => {        fetchCoinData();        fetchMarketCoinData(1, curSymbol);    }, []);    if (loading || !coin || !coinMarketData) {        return <ActivityIndicator size="large" />;    }    const {        id,        image: { small },        name,        symbol,        market_data: {            market_cap_rank,            current_price,            price_change_percentage_24h,        },    } = coin;    let currentPrice;    if(curSymbol === "usd"){        currentPrice = current_price.usd    }else if(curSymbol === "eur"){        currentPrice = current_price.eur    }else {        currentPrice = current_price.cny    }    const { prices } = coinMarketData;    const percentageColor =        price_change_percentage_24h < 0 ? "#ea3943" : "#16c784" || "white";    const chartColor = currentPrice > prices[0][1] ? "#16c784" : "#ea3943";    const screenWidth = Dimensions.get("window").width;    let curSym = ''    if (curSymbol === "usd"){        curSym = "$"    }else if(curSymbol === "eur"){        curSym ="€"    }else {        curSym ="¥"    }    const formatCurrency = (value) => {        "worklet";        if (value === "") {            if (currentPrice < 1) {                return `${curSym}${currentPrice}`;            }            return `${curSym}${currentPrice.toFixed(2)}`;        }        if (usdValue < 1) {            return `${curSym}${parseFloat(value)}`;        }        return `${curSym}${parseFloat(value).toFixed(2)}`;    };    const changeCoinValue = (value) => {        try {            setCoinValue(value);            const floatValue = parseFloat(value.replace(",", ".")) || 0;            setUsdValue((floatValue * currentPrice).toString());        }catch (e) {            console.log(e)        }    };    const changeUsdValue = (value) => {        try {            setUsdValue(value);            const floatValue = parseFloat(value.replace(",", ".")) || 0;            setCoinValue((floatValue / currentPrice).toString());        }catch (e) {            console.log(e)        }    };    const onSelectedRangeChange = (selectedRangeValue) => {        try {            setSelectedRange(selectedRangeValue);            fetchMarketCoinData(selectedRangeValue, curSymbol);        }catch (e) {            console.log(e)        }    };    return (        <View style={{ paddingHorizontal: 10 }}>            <ChartPathProvider                data={{                    points: prices.map(([x, y]) => ({ x, y })),                }}            >                <CoinDetailedHeader                    coinId={id}                    image={small}                    symbol={symbol}                    marketCapRank={market_cap_rank}                />                <View style={styles.priceContainer}>                    <View>                        <Text style={styles.name}>{name}</Text>                        <ChartYLabel format={formatCurrency} style={styles.currentPrice} />                    </View>                    <View                        style={{                            backgroundColor: percentageColor,                            paddingHorizontal: 3,                            paddingVertical: 8,                            borderRadius: 5,                            flexDirection: "row",                        }}                    >                        <AntDesign                            name={price_change_percentage_24h < 0 ? "caretdown" : "caretup"}                            size={12}                            color={"white"}                            style={{ alignSelf: "center", marginRight: 5 }}                        />                        <Text style={styles.priceChange}>                            {price_change_percentage_24h?.toFixed(2)}%                        </Text>                    </View>                </View>                <View style={styles.filtersContainer}>                    {filterDaysArray.map((day) => (                        <FilterComponent                            filterDay={day.filterDay}                            filterText={day.filterText}                            selectedRange={selectedRange}                            setSelectedRange={onSelectedRangeChange}                            key={day.filterText}                        />                    ))}                </View>                <View>                    <ChartPath                        strokeWidth={2}                        height={screenWidth / 2}                        stroke={chartColor}                        width={screenWidth}                    />                    <ChartDot style={{ backgroundColor: chartColor }} />                </View>                <View style={{ flexDirection: "row" }}>                    <View style={{ flexDirection: "row", flex: 1 }}>                        <Text style={{ color: "white", alignSelf: "center" }}>                            {symbol.toUpperCase()}                        </Text>                        <TextInput                            style={styles.input}                            value={coinValue}                            keyboardType="numeric"                            onChangeText={changeCoinValue}                        />                    </View>                    <View style={{ flexDirection: "row", flex: 1 }}>                        <Text style={{ color: "white", alignSelf: "center" }}>{curSymbol.toUpperCase()}</Text>                        <TextInput                            style={styles.input}                            value={usdValue}                            keyboardType="numeric"                            onChangeText={changeUsdValue}                        />                    </View>                </View>            </ChartPathProvider>        </View>    );};export default CoinDetailedScreen;