import React, { useEffect, useState } from "react";import {StyleSheet,FlatList,Modal, RefreshControl, View, Text, Image,TouchableOpacity} from "react-native";import CoinItem from "../../components/CoinItem";import { getMarketData } from "../../service/requests";import MyLoader from "../../components/Loading";import {AntDesign } from "@expo/vector-icons";import RadioForm, {RadioButton, RadioButtonInput, RadioButtonLabel} from 'react-native-simple-radio-button';import AsyncStorage from "@react-native-async-storage/async-storage";import {useWatchlist} from "../../Contexts/WatchlistContext";const HomeScreen = () => {    const [coins, setCoins] = useState([]);    const [loading, setLoading] = useState(false);    const [modalOpen, setModalOpen] = useState(false)    const {currencyGlobal,getCurrency} = useWatchlist()    const radio_props = [        {label: 'USD', value: 'usd' },        {label: 'EUR', value: 'eur' },        {label: 'CNY', value: 'cny' }    ]    console.log(currencyGlobal)    const insertCurrency = async (value) => {        setLoading(true)        try {            await AsyncStorage.setItem("@currency", value)            setLoading(false)        }catch (e) {            console.log(e)            setLoading(false)        }    }    const fetchCoins = async (pageNumber, currency) => {        if (loading) {            return;        }        setLoading(true);        const coinsData = await getMarketData(pageNumber,currency);        setCoins((existingCoins) => [...existingCoins, ...coinsData]);        setLoading(false);    };    const refetchCoins = async (pageNumber, currency) => {        if (loading) {            return;        }        setLoading(true);        setCoins([])        getCurrency()        const coinsData = await getMarketData(pageNumber,currency);        setCoins((existingCoins) => [...existingCoins, ...coinsData]);        setLoading(false);    };    useEffect(() => {        fetchCoins(1, currencyGlobal);    }, [currencyGlobal]);    return (        <View>            <Modal visible={modalOpen} animationType="slide">                <View style={styles.container}>                    <AntDesign                        name="close"                        size={24}                        style={styles.modalToggle}                        onPress={() => setModalOpen(false)}                    />                    <Text                        style={styles.text}                    >Change currency</Text>                    <RadioForm                        radio_props={radio_props}                        initial={currencyGlobal === "usd" ? 0 : currencyGlobal === "eur" ? 1 : 2}                        formHorizontal={true}                        onPress={value => insertCurrency(value)}                        labelStyle={{fontSize: 13, color: '#000',marginRight: 20}}                    />                </View>            </Modal>            <View style={{display: 'flex', flexDirection: 'row', justifyContent: "space-between",marginLeft: 10}}>                <View style={{                    alignItems: 'center',flexDirection: "row"                }}>                    <Text style={{ fontFamily: 'DroidSans', color: "white", fontSize: 25, letterSpacing: 1, paddingBottom: 5,marginLeft: 10 }}>Markets                    </Text>                </View>                <TouchableOpacity                    style={{alignItems: 'center', justifyContent: "center", marginRight: 10}}                    onPress={() => setModalOpen(true)}                >                    <AntDesign name="setting" size={24} style={{color: "#fff",}}/>                </TouchableOpacity>            </View>            {loading ? <MyLoader/> :                <FlatList                    data={coins}                    renderItem={({ item }) => <CoinItem marketCoin={item} currency={currencyGlobal}/>}                    onEndReached={() => fetchCoins(coins.length / 50 + 1)}                    refreshControl={                        <RefreshControl                            refreshing={loading}                            tintColor="white"                            onRefresh={() => {                                refetchCoins(1, currencyGlobal)                            }}                        />                    }                />            }        </View>    );};const styles = StyleSheet.create({    container:{        paddingHorizontal: 15,    },    modalToggle: {        marginTop: 30,        marginBottom: 10,        borderWidth: 1,        borderColor: '#f2f2f2',        padding: 10,        borderRadius: 10,        alignSelf: 'center',    },    text: {        color: "#000",        fontSize: 24,        marginBottom: 15    }})export default HomeScreen;